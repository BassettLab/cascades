function [A, B] = create_network(param)
%create_network Generates network with given parameters
%   param: network parameters, default parameters generated by
%       default_network_parameters()
% returns
%   A: connectivity/weight matrix, [pre- X post-]
%   B: input connectivity/weight vector, [N X 1]

A = 0;
B = ones(param.num_nodes, 1);
num_possible_edges = param.num_nodes * (param.num_nodes - 1) / 2;

switch param.graph_type
    case 'WRG' % weighted random graph
        [~, A] = Weighted_Random_Graph(param.num_nodes,...
            param.frac_conn, param.frac_conn * num_possible_edges);
    case 'RL' % ring lattice
        [~, A] = ;
    case 'WS' % watts-strogatz
    case 'MD2' % modular network with 2 communities
    case 'MD4' % " " " 4 "
    case 'MD8' % " " " 8 "
    case 'RG' % random geometric
    case 'BA' % Barabasi-Albert
    otherwise
        warning('create_network(): undefined graph_type')
end

switch param.weighting
    case 'G' % gaussian
    case 'PL' % power law
    case 'SC' % streamline counts
        warning('create_network(): streamline counts not implemented')
    case 'FA' % fractional anistropy
        warning('create_network(): fractional anistropy not implemented')
    otherwise
        warning('create_network(): undefined weighting')
end

% normalize weighting
warning('create_network: implement min weight')
A = A / max(max(A)) * param.weight_max;

if ~param.allow_autapses
    A = A .* ~diag(ones(param.num_nodes,1));
end

end
