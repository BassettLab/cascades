function [A, B, C] = network_create(p)
%create_network Generates network with given parameters
%   p: network parameters, default parameters generated by
%       default_network_parameters()
% returns
%   A: connectivity/weight matrix, [pre- X post-]
%   B: input connectivity/weight vector, [N X 1]
%   C: output connectivity/weight vector, [N X 1]

% max values
num_edges_max = p.N * (p.N - 1);
degree_max = num_edges_max / p.N;
% network values
num_edges = ceil(p.frac_conn * num_edges_max);
% degree = 2*ceil(p.frac_conn * degree_max);
degree = ceil(p.frac_conn * degree_max);
% network connectivity
A = network_connect(p.graph_type, p.N, p.frac_conn, num_edges,...
    degree, p.p_rewire);
A = network_weigh(A, p.weighting, p.weighting_params);
% A = weights_bound(A, p.weight_min, p.weight_max);
if ~p.allow_autapses
    A = A .* ~diag(ones(p.N,1));
end
if p.critical_branching
    A = scale_weights_to_criticality(A);
end
% input output connectivity
idx_io = randperm(p.N, p.N);
idx_i = idx_io(1:p.N_in);
idx_o = idx_io(end+1-p.N_out:end);
B = zeros(p.N, 1); B(idx_i) = 1;
C = zeros(p.N, 1); C(idx_o) = 1;
end
