function [A, B] = network_create(p)
%create_network Generates network with given parameters
%   p: network parameters, default parameters generated by
%       default_network_parameters()
% returns
%   A: connectivity/weight matrix, [pre- X post-]
%   B: input connectivity/weight vector, [N X 1]

% check node number
if p.num_nodes ~= p.num_nodes_input + p.num_nodes_output + ...
        p.num_nodes_hidden
    error(['Number of nodes should equal number of input, output, and '...
        'hidden nodes.'])
end
% max values
num_edges_max = p.num_nodes * (p.num_nodes - 1) / 2;
degree_max = num_edges_max / p.num_nodes;
% network values
num_edges = ceil(p.frac_conn * num_edges_max);
degree = 2 * ceil(p.frac_conn * degree_max);

A = network_connect(p.graph_type, p.num_nodes, p.frac_conn, num_edges,...
    degree, p.p_rewire);
A = network_weigh(A, p.weighting, p.weighting_params);
A = weights_bound(A, p.weight_min, weight_max);
if ~p.allow_autapses
    A = A .* ~diag(ones(p.num_nodes,1));
end
B = ones(p.num_nodes, 1);
end
